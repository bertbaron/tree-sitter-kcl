================================================================================
Schema Statement
================================================================================

schema Person:
    firstName: str = "John"

--------------------------------------------------------------------------------

(module
    (schema_statement
    (identifier)
    (block
        (assignment
        (dotted_name
            (identifier))
        (type
            (basic_type))
        (string
            (string_start)
            (string_content)
            (string_end))))))

================================================================================
Protocol Statement
================================================================================

protocol DataProtocol:
    data: str

--------------------------------------------------------------------------------

(module
      (protocol_statement
        (identifier)
        (block
          (assignment
            (dotted_name
              (identifier))
            (basic_type)))))

================================================================================
Rule Statement
================================================================================

rule SomeRule:
    age > 0, "rule check failure message"

--------------------------------------------------------------------------------

(module
  (rule_statement
    (identifier)
    (block
      (if_rule_statement
        (comparison_operator
          (attribute
            (identifier))
          (integer))
        (string
          (string_start)
          (string_content)
          (string_end))))))

================================================================================
Schema Statement with Check
================================================================================

schema Config:
    volumes: [{str:}]
    services: [{str:}]
    check:
        all service in services {
            service.clusterIP == "NONE" 
        }, "invalid cluster ip"

        any volume in volumes {
            volume.mountPath in ["/home/admin", "/home/myapp"]
        }

--------------------------------------------------------------------------------
(module
      (schema_statement
        (identifier)
        (block
          (assignment
            (dotted_name
              (identifier))
            (list_type
              (type
                (dict_type
                  (type
                    (basic_type))))))
          (assignment
            (dotted_name
              (identifier))
            (list_type
              (type
                (dict_type
                  (type
                    (basic_type))))))
          (check_statement
            (quant_expr
              (quant_op)
              (identifier)
              (quant_target
                (identifier))
              (comparison_operator
                (selector_expression
                  (attribute
                    (identifier))
                  (select_suffix
                    (identifier)))
                (string
                  (string_start)
                  (string_content)
                  (string_end))))
            (string
              (string_start)
              (string_content)
              (string_end)))
          (quant_expr
            (quant_op)
            (identifier)
            (quant_target
              (identifier))
            (comparison_operator
              (selector_expression
                (attribute
                  (identifier))
                (select_suffix
                  (identifier)))
              (list
                (string
                  (string_start)
                  (string_content)
                  (string_end))
                (string
                  (string_start)
                  (string_content)
                  (string_end))))))))

================================================================================
Decorated of a Schema
================================================================================

@deprecated
schema ObsoleteSchema:
    attr: str

--------------------------------------------------------------------------------

(module
  (decorated_definition
    (decorator
      (attribute
        (identifier)))
    (schema_statement
      (identifier)
      (block
        (assignment
          (dotted_name
            (identifier))
          (basic_type))))))

================================================================================
Schema Kwargs
================================================================================

personA = Person() {}

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (schema_instantiation
      (call
        (attribute
          (identifier))
        (argument_list))
      (dictionary))))

================================================================================
Unification Statement
================================================================================

personInstance : Person {name: "Alice"}

--------------------------------------------------------------------------------

(module
  (unification
    (dotted_name
      (identifier))
    (schema_expr
      (identifier)
      (dict_expr
        (pair
          (attribute
            (identifier))
          (string
            (string_start)
            (string_content)
            (string_end)))))))

================================================================================
Schema Index Signature
================================================================================

schema Map:
    """
    Map is a schema with a key of str type and a value of str type
    """
    [str]: str  # `{attr_alias}` can be omitted.

--------------------------------------------------------------------------------

(module
  (schema_statement
    (identifier)
    (block
      (string
        (string_start)
        (string_content)
        (string_end))
      (schema_index_signature
        (basic_type)
        (type
          (basic_type))
        (comment)))))

================================================================================
Schema Index Signature with Check Block
================================================================================

schema Data:
    [data: str]: str
    check:
        data in ["Alice", "Bob"]

data = Data {
    Alice = "10"
    Bob = "12"
}

--------------------------------------------------------------------------------

(module
  (schema_statement
    (identifier)
    (block
      (schema_index_signature
        (identifier)
        (basic_type)
        (type
          (basic_type)))
      (check_statement
        (comparison_operator
          (attribute
            (identifier))
          (list
            (string
              (string_start)
              (string_content)
              (string_end))
            (string
              (string_start)
              (string_content)
              (string_end)))))))
  (assignment
    (dotted_name
      (identifier))
    (schema_expr
      (identifier)
      (dict_expr
        (pair
          (attribute
            (identifier))
          (string
            (string_start)
            (string_content)
            (string_end)))
        (pair
          (attribute
            (identifier))
          (string
            (string_start)
            (string_content)
            (string_end)))))))

================================================================================
Schema index signature attribute alias
================================================================================

schema Environment:
    [id: str]: EnvironmentSpec = {
        fullName = id
    }

--------------------------------------------------------------------------------

(module
  (schema_statement
    (identifier)
    (block
      (schema_index_signature
        (identifier)
        (basic_type)
        (type
          (schema_type
            (dotted_name
              (identifier))))
        (test
          (config_expr
            (config_entries
              (config_entry
                (test
                  (dotted_name
                    (identifier)))
                (test
                  (dotted_name
                    (identifier)))))))))))

================================================================================
Schema index signature attribute alias
================================================================================

schema employee(person):
    bankCard: int
    gender: str

--------------------------------------------------------------------------------

(module
  (schema_statement
    (identifier)
    (identifier)
    (block
      (assignment
        (dotted_name
          (identifier))
        (basic_type))
      (assignment
        (dotted_name
          (identifier))
        (basic_type)))))

================================================================================
Rule Statement with any condition
================================================================================

rule SomeChecker for SomeProtocol:
    id > 0, "id must >0"

    any service in services {
        service.clusterIP == "NONE" if service.type
    }
   
--------------------------------------------------------------------------------

(module
  (rule_statement
    (identifier)
    (identifier)
    (block
      (if_rule_statement
        (comparison_operator
          (attribute
            (identifier))
          (integer))
        (string
          (string_start)
          (string_content)
          (string_end)))
      (quant_expr
        (quant_op)
        (identifier)
        (quant_target
          (identifier))
        (comparison_operator
          (selector_expression
            (attribute
              (identifier))
            (select_suffix
              (identifier)))
          (selector_expression
            (conditional_expression
              (string
                (string_start)
                (string_content)
                (string_end))
              (attribute
                (identifier)))
            (select_suffix
              (identifier))))))))

================================================================================
Schema Mixin Statement
================================================================================

schema Parent:
    mixin [NameMixin]
    age: int
   
--------------------------------------------------------------------------------

(module
  (schema_statement
    (identifier)
    (block
      (mixin_statement
        (list
          (attribute
            (identifier))))
      (assignment
        (dotted_name
          (identifier))
        (basic_type)))))

================================================================================
Schema Statement with checks
================================================================================

schema NameMixin:
  check:
    name None
   
--------------------------------------------------------------------------------

(module
  (schema_statement
    (identifier)
    (block
      (check_statement
        (attribute
          (identifier)))
      (none))))

================================================================================
Schema Statement with Data
================================================================================

schema Data for DataProtocol:
    x: str = data
   
--------------------------------------------------------------------------------

(module
  (schema_statement
    (identifier)
    (identifier)
    (block
      (assignment
        (dotted_name
          (identifier))
        (type
          (basic_type))
        (attribute
          (identifier))))))

================================================================================
schema config
================================================================================

schema Config:
    x?: int = 1
    y ?: str = "s"

--------------------------------------------------------------------------------

(module
  (schema_statement
    (identifier)
    (block
      (optional_attribute_declaration
        (identifier)
        (type
          (basic_type))
        (integer))
      (optional_attribute_declaration
        (identifier)
        (type
          (basic_type))
        (string
          (string_start)
          (string_content)
          (string_end))))))

================================================================================
Rule Structure
================================================================================

rule SomeChecker for SomeProtocol:
  id > 0, "id must >0"

  any volume in volumes {
    volume.mountPath in ["/home/admin", "/home/myapp"]
  }

--------------------------------------------------------------------------------

(module
  (rule_statement
    (identifier)
    (identifier)
    (block
      (if_rule_statement
        (comparison_operator
          (attribute
            (identifier))
          (integer))
        (string
          (string_start)
          (string_content)
          (string_end)))
      (quant_expr
        (quant_op)
        (identifier)
        (quant_target
          (identifier))
        (comparison_operator
          (selector_expression
            (attribute
              (identifier))
            (select_suffix
              (identifier)))
          (list
            (string
              (string_start)
              (string_content)
              (string_end))
            (string
              (string_start)
              (string_content)
              (string_end))))))))

================================================================================
Check with Config Parameter
================================================================================

SomeChecker {
  id = 1
  env = {
    MY_ENV = "MY_ENV_VALUE"
  }
  services = [
    {
        type = "ClusterIP"
        clusterIp = "NONE"
    }
  ]
  volumes = [
    {
        mountPath = "/home/admin"
    },
    {
        mountPath = "/home/myapp"
    }
  ]
}

--------------------------------------------------------------------------------

(module
  (schema_expr
    (identifier)
    (dict_expr
      (pair
        (attribute
          (identifier))
        (integer))
      (pair
        (attribute
          (identifier))
        (config_expr
          (config_entries
            (config_entry
              (test
                (dotted_name
                  (identifier)))
              (test
                (string
                  (string_start)
                  (string_content)
                  (string_end)))))))
      (pair
        (attribute
          (identifier))
        (list
          (config_expr
            (config_entries
              (config_entry
                (test
                  (dotted_name
                    (identifier)))
                (test
                  (string
                    (string_start)
                    (string_content)
                    (string_end))))
              (config_entry
                (test
                  (dotted_name
                    (identifier)))
                (test
                  (string
                    (string_start)
                    (string_content)
                    (string_end))))))))
      (pair
        (attribute
          (identifier))
        (list
          (config_expr
            (config_entries
              (config_entry
                (test
                  (dotted_name
                    (identifier)))
                (test
                  (string
                    (string_start)
                    (string_content)
                    (string_end))))))
          (config_expr
            (config_entries
              (config_entry
                (test
                  (dotted_name
                    (identifier)))
                (test
                  (string
                    (string_start)
                    (string_content)
                    (string_end)))))))))))

================================================================================
Multiplexing Rule Statement
================================================================================


rule Allow:
  UserIsAdmin()
  any grant in UserIsGranted() {
      input.action == grant.action
  }

rule UserIsAdmin:
  any user in data.user_roles[input.user] {
      user == "admin"
  }

--------------------------------------------------------------------------------

(module
  (rule_statement
    (identifier)
    (block
      (call
        (attribute
          (identifier))
        (argument_list))
      (quant_expr
        (quant_op)
        (identifier)
        (quant_target
          (call
            (attribute
              (identifier))
            (argument_list)))
        (comparison_operator
          (selector_expression
            (attribute
              (identifier))
            (select_suffix
              (identifier)))
          (selector_expression
            (attribute
              (identifier))
            (select_suffix
              (identifier)))))))
  (rule_statement
    (identifier)
    (block
      (quant_expr
        (quant_op)
        (identifier)
        (quant_target
          (subscript
            (selector_expression
              (attribute
                (identifier))
              (select_suffix
                (identifier)))
            (selector_expression
              (attribute
                (identifier))
              (select_suffix
                (identifier)))))
        (comparison_operator
          (attribute
            (identifier))
          (string
            (string_start)
            (string_content)
            (string_end)))))))

================================================================================
schema with multiple keywords
================================================================================

schema NameMixin:
    check:
        name not None

schema Person:
    """
    Person schema definition
    """
    mixin [NameMixin]

    name: str = "Alice"
    age: int

person = Person {
    age = 18
}

--------------------------------------------------------------------------------

  (module
    (schema_statement
      (identifier)
      (block
        (check_statement
          (not_expression
            (attribute
              (identifier))
            (none)))))
    (schema_statement
      (identifier)
      (block
        (string
          (string_start)
          (string_content)
          (string_end))
        (mixin_statement
          (list
            (attribute
              (identifier))))
        (assignment
          (dotted_name
            (identifier))
          (type
            (basic_type))
          (string
            (string_start)
            (string_content)
            (string_end)))
        (assignment
          (dotted_name
            (identifier))
          (basic_type))))
    (assignment
      (dotted_name
        (identifier))
      (schema_expr
        (identifier)
        (dict_expr
          (pair
            (attribute
              (identifier))
            (integer))))))