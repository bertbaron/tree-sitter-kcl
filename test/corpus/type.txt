================================================================================
Basic Type
================================================================================

a: int = 1
b: str = "s"
c: float = 1.0
d: bool = True

--------------------------------------------------------------------------------

(module
  (assign_stmt
    (dotted_name
      (identifier))
    (type
      (basic_type))
    (integer))
  (assign_stmt
    (dotted_name
      (identifier))
    (type
      (basic_type))
    (string
      (string_start)
      (string_content)
      (string_end)))
  (assign_stmt
    (dotted_name
      (identifier))
    (type
      (basic_type))
    (float))
  (assign_stmt
    (dotted_name
      (identifier))
    (type
      (basic_type))
    (true)))

================================================================================
List Type
================================================================================

a: [int] = [1, 2, 3]

--------------------------------------------------------------------------------

(module
  (assign_stmt
    (dotted_name
      (identifier))
    (type
      (list_type
        (type
          (basic_type))))
    (list_expr
      (integer)
      (integer)
      (integer))))

================================================================================
Dictionary Type
================================================================================

b: {str:str} = {k1 = "v1", k2 = "v2"}

--------------------------------------------------------------------------------

(module
  (assign_stmt
    (dotted_name
      (identifier))
    (type
      (dict_type
        (type
          (basic_type))
        (type
          (basic_type))))
    (config_expr
      (config_entries
        (config_entry
          (identifier)
          (string
            (string_start)
            (string_content)
            (string_end)))
        (config_entry
          (identifier)
          (string
            (string_start)
            (string_content)
            (string_end)))))))

================================================================================
Schema Type
================================================================================

schema Person:
    name: str = "Alice"
    age: int = 10

c: Person = Person {}

--------------------------------------------------------------------------------

(module
  (schema_stmt
    (identifier)
    (block
      (assign_stmt
        (dotted_name
          (identifier))
        (type
          (basic_type))
        (string
          (string_start)
          (string_content)
          (string_end)))
      (assign_stmt
        (dotted_name
          (identifier))
        (type
          (basic_type))
        (integer))))
  (assign_stmt
    (dotted_name
      (identifier))
    (type
      (schema_type
        (dotted_name
          (identifier))))
    (schema_expr
      (identifier)
      (config_expr))))

================================================================================
Union Type
================================================================================

schema x[argc: int]: 
    p: int | str | float

--------------------------------------------------------------------------------

(module
  (schema_stmt
    (typed_parameter
      (identifier)
      (identifier)
      (type
        (basic_type)))
    (block
      (assign_stmt
        (dotted_name
          (identifier))
        (union_type
          (type
            (union_type
              (type
                (basic_type))
              (type
                (basic_type))))
          (type
            (basic_type)))))))

================================================================================
Any Type
================================================================================

schema Config:
    literalConf: any = 1
    dictConf: {str:any} = {key = "value"}
    listConf: [any] = [1, "2", True]

config = Config {}

--------------------------------------------------------------------------------

(module
  (schema_stmt
    (identifier)
    (block
      (assign_stmt
        (dotted_name
          (identifier))
        (type
          (basic_type))
        (integer))
      (assign_stmt
        (dotted_name
          (identifier))
        (type
          (dict_type
            (type
              (basic_type))
            (type
              (basic_type))))
        (config_expr
          (config_entries
            (config_entry
              (identifier)
              (string
                (string_start)
                (string_content)
                (string_end))))))
      (assign_stmt
        (dotted_name
          (identifier))
        (type
          (list_type
            (type
              (basic_type))))
        (list_expr
          (integer)
          (string
            (string_start)
            (string_content)
            (string_end))
          (true)))))
  (assign_stmt
    (dotted_name
      (identifier))
    (schema_expr
      (identifier)
      (config_expr))))

================================================================================
Type Alias Statement with import
================================================================================

import pkg

type Data = pkg.Data

--------------------------------------------------------------------------------

(module
  (import_stmt
    (dotted_name
      (identifier)))
  (type_alias_stmt
    (type
      (schema_type
        (dotted_name
          (identifier))))
    (type
      (schema_type
        (dotted_name
          (identifier)
          (identifier))))))

================================================================================
Type Alias Statement with Union Type
================================================================================

type Color = "Red" | "Yellow" | "Blue"

schema Config:
    color: Color = "Red"

config = Config {
    color = "Blue"
}

--------------------------------------------------------------------------------

(module
  (type_alias_stmt
    (type
      (schema_type
        (dotted_name
          (identifier))))
    (type
      (union_type
        (type
          (union_type
            (type
              (literal_type
                (string
                  (string_start)
                  (string_content)
                  (string_end))))
            (type
              (literal_type
                (string
                  (string_start)
                  (string_content)
                  (string_end))))))
        (type
          (literal_type
            (string
              (string_start)
              (string_content)
              (string_end)))))))
  (schema_stmt
    (identifier)
    (block
      (assign_stmt
        (dotted_name
          (identifier))
        (type
          (schema_type
            (dotted_name
              (identifier))))
        (string
          (string_start)
          (string_content)
          (string_end)))))
  (assign_stmt
    (dotted_name
      (identifier))
    (schema_expr
      (identifier)
      (config_expr
        (config_entries
          (config_entry
            (identifier)
            (string
              (string_start)
              (string_content)
              (string_end))))))))

================================================================================
Type Guards
================================================================================

schema Data1:
    id?: int

schema Data2:
    name?: str

data: Data1 | Data2 = Data1 {}

if typeof(data) == "Data1":
    data1 = data as Data1
elif typeof(data) == "Data2":
    data2 = data as Data2

--------------------------------------------------------------------------------

(module
  (schema_stmt
    (identifier)
    (block
      (optional_attribute_declaration
        (identifier)
        (type
          (basic_type)))))
  (schema_stmt
    (identifier)
    (block
      (optional_attribute_declaration
        (identifier)
        (type
          (basic_type)))))
  (assign_stmt
    (dotted_name
      (identifier))
    (type
      (union_type
        (type
          (schema_type
            (dotted_name
              (identifier))))
        (type
          (schema_type
            (dotted_name
              (identifier))))))
    (schema_expr
      (identifier)
      (config_expr)))
  (if_stmt
    (comparison_expr
      (call_expr
        (identifier)
        (argument_list
          (identifier)))
      (string
        (string_start)
        (string_content)
        (string_end)))
    (block
      (assign_stmt
        (dotted_name
          (identifier))
        (as_expr
          (identifier)
          (identifier))))
    (elif_clause
      (comparison_expr
        (call_expr
          (identifier)
          (argument_list
            (identifier)))
        (string
          (string_start)
          (string_content)
          (string_end)))
      (block
        (assign_stmt
          (dotted_name
            (identifier))
          (as_expr
            (identifier)
            (identifier)))))))
